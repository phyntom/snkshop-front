{"ast":null,"code":"import { useState } from 'react';\n\nconst usePagination = (data, itemsPerPage, displayPages) => {\n  const [currentPage, setCurrentPage] = useState(1);\n  const [startPage, setStartPage] = useState(1);\n  const [endPage, setEndPage] = useState(displayPages);\n  const maxPage = Math.ceil(data.length / itemsPerPage);\n\n  const currentData = () => {\n    const begin = (currentPage - 1) * itemsPerPage;\n    const end = begin + itemsPerPage;\n    return data.slice(begin, end);\n  };\n\n  const next = () => {\n    // go the next page but never go beyond max\n    let actualPage = Math.min(currentPage + 1, maxPage);\n    setCurrentPage(actualPage);\n\n    if (actualPage > displayPages) {\n      setEndPage(() => Math.min(actualPage + 1, maxPage));\n\n      if (actualPage !== maxPage) {\n        setStartPage(() => Math.min(actualPage - 1, maxPage));\n      } else {\n        setStartPage(() => Math.min(actualPage - 2, maxPage));\n      }\n    } else {\n      setStartPage(1);\n      setEndPage(displayPages);\n    }\n  };\n\n  const prev = () => {\n    // go to the previous but never go beyong the first page\n    let actualPage = Math.max(currentPage - 1, 1);\n    setCurrentPage(actualPage);\n\n    if (actualPage > displayPages) {\n      setStartPage(() => Math.max(actualPage - 1, 1));\n      setEndPage(Math.max(actualPage + 1, 1));\n    } else {\n      setStartPage(1);\n      setEndPage(displayPages);\n    }\n  };\n\n  const jump = page => {\n    // get the current page number between the 1 and the one you give\n    const pageNumber = Math.max(1, page); // but remain in the range\n\n    let actualPage = Math.min(pageNumber, maxPage);\n    setCurrentPage(actualPage);\n\n    if (actualPage >= displayPages) {\n      if (actualPage !== maxPage) {\n        setStartPage(() => Math.max(actualPage - 1, 1));\n      } else {\n        setStartPage(() => Math.max(actualPage - 2, 1));\n      }\n\n      setEndPage(() => Math.min(actualPage + 1, maxPage));\n    } else {\n      setStartPage(1);\n      setEndPage(displayPages);\n    }\n  };\n\n  return {\n    next,\n    prev,\n    jump,\n    currentData,\n    currentPage,\n    maxPage,\n    startPage,\n    endPage\n  };\n};\n\nexport default usePagination;","map":{"version":3,"sources":["/Users/aimable/WebstormProjects/sneakershop/snkshop-frontend/src/components/usePagination.js"],"names":["useState","usePagination","data","itemsPerPage","displayPages","currentPage","setCurrentPage","startPage","setStartPage","endPage","setEndPage","maxPage","Math","ceil","length","currentData","begin","end","slice","next","actualPage","min","prev","max","jump","page","pageNumber"],"mappings":"AAAA,SAASA,QAAT,QAAyB,OAAzB;;AAEA,MAAMC,aAAa,GAAG,CAACC,IAAD,EAAOC,YAAP,EAAqBC,YAArB,KAAsC;AACzD,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,CAAD,CAA9C;AACA,QAAM,CAACO,SAAD,EAAYC,YAAZ,IAA4BR,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAM,CAACS,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAACI,YAAD,CAAtC;AACA,QAAMO,OAAO,GAAGC,IAAI,CAACC,IAAL,CAAUX,IAAI,CAACY,MAAL,GAAcX,YAAxB,CAAhB;;AAEA,QAAMY,WAAW,GAAG,MAAM;AACvB,UAAMC,KAAK,GAAG,CAACX,WAAW,GAAG,CAAf,IAAoBF,YAAlC;AACA,UAAMc,GAAG,GAAGD,KAAK,GAAGb,YAApB;AACA,WAAOD,IAAI,CAACgB,KAAL,CAAWF,KAAX,EAAkBC,GAAlB,CAAP;AACF,GAJD;;AAMA,QAAME,IAAI,GAAG,MAAM;AAChB;AACA,QAAIC,UAAU,GAAGR,IAAI,CAACS,GAAL,CAAShB,WAAW,GAAG,CAAvB,EAA0BM,OAA1B,CAAjB;AACAL,IAAAA,cAAc,CAACc,UAAD,CAAd;;AACA,QAAIA,UAAU,GAAGhB,YAAjB,EAA+B;AAC5BM,MAAAA,UAAU,CAAC,MAAME,IAAI,CAACS,GAAL,CAASD,UAAU,GAAG,CAAtB,EAAyBT,OAAzB,CAAP,CAAV;;AACA,UAAIS,UAAU,KAAKT,OAAnB,EAA4B;AACzBH,QAAAA,YAAY,CAAC,MAAMI,IAAI,CAACS,GAAL,CAASD,UAAU,GAAG,CAAtB,EAAyBT,OAAzB,CAAP,CAAZ;AACF,OAFD,MAEO;AACJH,QAAAA,YAAY,CAAC,MAAMI,IAAI,CAACS,GAAL,CAASD,UAAU,GAAG,CAAtB,EAAyBT,OAAzB,CAAP,CAAZ;AACF;AACH,KAPD,MAOO;AACJH,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,MAAAA,UAAU,CAACN,YAAD,CAAV;AACF;AACH,GAfD;;AAiBA,QAAMkB,IAAI,GAAG,MAAM;AAChB;AACA,QAAIF,UAAU,GAAGR,IAAI,CAACW,GAAL,CAASlB,WAAW,GAAG,CAAvB,EAA0B,CAA1B,CAAjB;AACAC,IAAAA,cAAc,CAACc,UAAD,CAAd;;AACA,QAAIA,UAAU,GAAGhB,YAAjB,EAA+B;AAC5BI,MAAAA,YAAY,CAAC,MAAMI,IAAI,CAACW,GAAL,CAASH,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAP,CAAZ;AACAV,MAAAA,UAAU,CAACE,IAAI,CAACW,GAAL,CAASH,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAD,CAAV;AACF,KAHD,MAGO;AACJZ,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,MAAAA,UAAU,CAACN,YAAD,CAAV;AACF;AACH,GAXD;;AAaA,QAAMoB,IAAI,GAAIC,IAAD,IAAU;AACpB;AACA,UAAMC,UAAU,GAAGd,IAAI,CAACW,GAAL,CAAS,CAAT,EAAYE,IAAZ,CAAnB,CAFoB,CAGpB;;AACA,QAAIL,UAAU,GAAGR,IAAI,CAACS,GAAL,CAASK,UAAT,EAAqBf,OAArB,CAAjB;AACAL,IAAAA,cAAc,CAACc,UAAD,CAAd;;AACA,QAAIA,UAAU,IAAIhB,YAAlB,EAAgC;AAC7B,UAAIgB,UAAU,KAAKT,OAAnB,EAA4B;AACzBH,QAAAA,YAAY,CAAC,MAAMI,IAAI,CAACW,GAAL,CAASH,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAP,CAAZ;AACF,OAFD,MAEO;AACJZ,QAAAA,YAAY,CAAC,MAAMI,IAAI,CAACW,GAAL,CAASH,UAAU,GAAG,CAAtB,EAAyB,CAAzB,CAAP,CAAZ;AACF;;AACDV,MAAAA,UAAU,CAAC,MAAME,IAAI,CAACS,GAAL,CAASD,UAAU,GAAG,CAAtB,EAAyBT,OAAzB,CAAP,CAAV;AACF,KAPD,MAOO;AACJH,MAAAA,YAAY,CAAC,CAAD,CAAZ;AACAE,MAAAA,UAAU,CAACN,YAAD,CAAV;AACF;AACH,GAjBD;;AAmBA,SAAO;AAAEe,IAAAA,IAAF;AAAQG,IAAAA,IAAR;AAAcE,IAAAA,IAAd;AAAoBT,IAAAA,WAApB;AAAiCV,IAAAA,WAAjC;AAA8CM,IAAAA,OAA9C;AAAuDJ,IAAAA,SAAvD;AAAkEE,IAAAA;AAAlE,GAAP;AACF,CA9DD;;AAgEA,eAAeR,aAAf","sourcesContent":["import { useState } from 'react';\n\nconst usePagination = (data, itemsPerPage, displayPages) => {\n   const [currentPage, setCurrentPage] = useState(1);\n   const [startPage, setStartPage] = useState(1);\n   const [endPage, setEndPage] = useState(displayPages);\n   const maxPage = Math.ceil(data.length / itemsPerPage);\n\n   const currentData = () => {\n      const begin = (currentPage - 1) * itemsPerPage;\n      const end = begin + itemsPerPage;\n      return data.slice(begin, end);\n   };\n\n   const next = () => {\n      // go the next page but never go beyond max\n      let actualPage = Math.min(currentPage + 1, maxPage);\n      setCurrentPage(actualPage);\n      if (actualPage > displayPages) {\n         setEndPage(() => Math.min(actualPage + 1, maxPage));\n         if (actualPage !== maxPage) {\n            setStartPage(() => Math.min(actualPage - 1, maxPage));\n         } else {\n            setStartPage(() => Math.min(actualPage - 2, maxPage));\n         }\n      } else {\n         setStartPage(1);\n         setEndPage(displayPages);\n      }\n   };\n\n   const prev = () => {\n      // go to the previous but never go beyong the first page\n      let actualPage = Math.max(currentPage - 1, 1);\n      setCurrentPage(actualPage);\n      if (actualPage > displayPages) {\n         setStartPage(() => Math.max(actualPage - 1, 1));\n         setEndPage(Math.max(actualPage + 1, 1));\n      } else {\n         setStartPage(1);\n         setEndPage(displayPages);\n      }\n   };\n\n   const jump = (page) => {\n      // get the current page number between the 1 and the one you give\n      const pageNumber = Math.max(1, page);\n      // but remain in the range\n      let actualPage = Math.min(pageNumber, maxPage);\n      setCurrentPage(actualPage);\n      if (actualPage >= displayPages) {\n         if (actualPage !== maxPage) {\n            setStartPage(() => Math.max(actualPage - 1, 1));\n         } else {\n            setStartPage(() => Math.max(actualPage - 2, 1));\n         }\n         setEndPage(() => Math.min(actualPage + 1, maxPage));\n      } else {\n         setStartPage(1);\n         setEndPage(displayPages);\n      }\n   };\n\n   return { next, prev, jump, currentData, currentPage, maxPage, startPage, endPage };\n};\n\nexport default usePagination;\n"]},"metadata":{},"sourceType":"module"}