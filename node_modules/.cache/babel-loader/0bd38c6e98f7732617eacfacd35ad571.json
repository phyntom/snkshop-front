{"ast":null,"code":"var _jsxFileName = \"/Users/aimable/WebstormProjects/sneakershop/snkshop-frontend/src/components/Paginator.js\";\nimport React from 'react';\nimport { Pagination } from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst Paginator = props => {\n  const {\n    next,\n    prev,\n    jump,\n    currentPage,\n    maxPage,\n    startPage,\n    currentData,\n    endPage,\n    pageSize\n  } = props;\n  let pages = [];\n  pageSize >= currentData.length ? pages = _.range(startPage, endPage) : pages = _.range(startPage, endPage + 1);\n  return /*#__PURE__*/React.createElement(Pagination, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }\n  }, currentPage > 1 ? /*#__PURE__*/React.createElement(Pagination.Prev, {\n    onClick: () => prev(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 29\n    }\n  }) : '', pages.map(page => /*#__PURE__*/React.createElement(Pagination.Item, {\n    active: page === currentPage,\n    key: page,\n    onClick: () => jump(page),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }\n  }, page)), currentPage !== maxPage ? /*#__PURE__*/React.createElement(Pagination.Next, {\n    onClick: () => next(),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 37\n    }\n  }) : '');\n};\n\nexport default Paginator;\n{\n  /* {currentPage > displayPages ? (\n           <>\n              <Pagination.Item active={maxPage === 1} onClick={() => jump(1)}>\n                 {1}\n              </Pagination.Item>\n              <Pagination.Ellipsis />\n           </>\n        ) : (\n           ''\n        )} */\n}","map":{"version":3,"sources":["/Users/aimable/WebstormProjects/sneakershop/snkshop-frontend/src/components/Paginator.js"],"names":["React","Pagination","_","Paginator","props","next","prev","jump","currentPage","maxPage","startPage","currentData","endPage","pageSize","pages","length","range","map","page"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,UAAT,QAA2B,iBAA3B;AACA,OAAOC,CAAP,MAAc,QAAd;;AAEA,MAAMC,SAAS,GAAIC,KAAD,IAAW;AAC1B,QAAM;AACHC,IAAAA,IADG;AAEHC,IAAAA,IAFG;AAGHC,IAAAA,IAHG;AAIHC,IAAAA,WAJG;AAKHC,IAAAA,OALG;AAMHC,IAAAA,SANG;AAOHC,IAAAA,WAPG;AAQHC,IAAAA,OARG;AASHC,IAAAA;AATG,MAUFT,KAVJ;AAYA,MAAIU,KAAK,GAAG,EAAZ;AACAD,EAAAA,QAAQ,IAAIF,WAAW,CAACI,MAAxB,GACMD,KAAK,GAAGZ,CAAC,CAACc,KAAF,CAAQN,SAAR,EAAmBE,OAAnB,CADd,GAEME,KAAK,GAAGZ,CAAC,CAACc,KAAF,CAAQN,SAAR,EAAmBE,OAAO,GAAG,CAA7B,CAFd;AAIA,sBACG,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIJ,WAAW,GAAG,CAAd,gBAAkB,oBAAC,UAAD,CAAY,IAAZ;AAAiB,IAAA,OAAO,EAAE,MAAMF,IAAI,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAlB,GAA+D,EADnE,EAEIQ,KAAK,CAACG,GAAN,CAAWC,IAAD,iBACR,oBAAC,UAAD,CAAY,IAAZ;AAAiB,IAAA,MAAM,EAAEA,IAAI,KAAKV,WAAlC;AAA+C,IAAA,GAAG,EAAEU,IAApD;AAA0D,IAAA,OAAO,EAAE,MAAMX,IAAI,CAACW,IAAD,CAA7E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIA,IADJ,CADF,CAFJ,EAOIV,WAAW,KAAKC,OAAhB,gBAA0B,oBAAC,UAAD,CAAY,IAAZ;AAAiB,IAAA,OAAO,EAAE,MAAMJ,IAAI,EAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAA1B,GAAuE,EAP3E,CADH;AAWF,CA7BD;;AA+BA,eAAeF,SAAf;AAEA;AACG;;;;;;;;;;AAUF","sourcesContent":["import React from 'react';\nimport { Pagination } from 'react-bootstrap';\nimport _ from 'lodash';\n\nconst Paginator = (props) => {\n   const {\n      next,\n      prev,\n      jump,\n      currentPage,\n      maxPage,\n      startPage,\n      currentData,\n      endPage,\n      pageSize,\n   } = props;\n\n   let pages = [];\n   pageSize >= currentData.length\n      ? (pages = _.range(startPage, endPage))\n      : (pages = _.range(startPage, endPage + 1));\n\n   return (\n      <Pagination>\n         {currentPage > 1 ? <Pagination.Prev onClick={() => prev()} /> : ''}\n         {pages.map((page) => (\n            <Pagination.Item active={page === currentPage} key={page} onClick={() => jump(page)}>\n               {page}\n            </Pagination.Item>\n         ))}\n         {currentPage !== maxPage ? <Pagination.Next onClick={() => next()} /> : ''}\n      </Pagination>\n   );\n};\n\nexport default Paginator;\n\n{\n   /* {currentPage > displayPages ? (\n            <>\n               <Pagination.Item active={maxPage === 1} onClick={() => jump(1)}>\n                  {1}\n               </Pagination.Item>\n               <Pagination.Ellipsis />\n            </>\n         ) : (\n            ''\n         )} */\n}\n"]},"metadata":{},"sourceType":"module"}